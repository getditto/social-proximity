//
//  DITWriteTransactionPendingCursorOperation.h
//  DittoSyncKit
//
//  Created by Hamilton Chapman on 03/02/2020.
//  Copyright Â© 2020 Ditto. All rights reserved.
//

#import <Foundation/Foundation.h>

#import <DittoSyncKit/DITSortDirection.h>

@class DITMutableDocument;
@class DITUpdateResult;

NS_ASSUME_NONNULL_BEGIN

/**
 These objects are returned when using `find` and `findAll` functionality on
 `DITScopedWriteTransaction`s.

 You can use them to perform updates on documents and remove or evict documents.
 */
@interface DITWriteTransactionPendingCursorOperation : NSObject

/**
 Limit the number of documents that get returned when querying a collection for matching documents.

 @param limit The maximum number of documents that will be returned.

 @return A `DITWriteTransactionPendingCursorOperation` that you can chain further function calls and
 then either get the matching documents immediately or get updates about them over time.
 */
- (DITWriteTransactionPendingCursorOperation *)limit:(int)limit;

/**
 Offset the resulting set of matching documents.

 This is useful if you aren't interested in the first N matching documents for one reason or
 another. For example, you might already have queried the collection and obtained the first 20
 matching documents and so you might want to run the same query as you did previously but ignore the
 first 20 matching documents, and that is when you would use `offset`.

 @param offset The number of matching documents that you want the eventual resulting set of matching
 documents to be offset by (and thus not include).

 @return A `DITWriteTransactionPendingCursorOperation` that you can chain further function calls and
 then either get the matching documents immediately or get updates about them over time.
 */
- (DITWriteTransactionPendingCursorOperation *)offset:(uint)offset;

/**
 Sort the documents that match the query provided in the preceding `find`-like function call.

 @param query The query specifies the logic to be used when sorting the matching documents.
 @param direction Specify whether you want the sorting order to be ascending or descending.

 @return A `DITWriteTransactionPendingCursorOperation` that you can chain further function calls and
 then either get the matching documents immediately or get updates about them over time.
 */
- (DITWriteTransactionPendingCursorOperation *)sort:(NSString *)query
                                          direction:(DITSortDirection)direction;

/**
 Remove all documents that match the query generated by the preceding function chaining.

 @return A list containing the IDs of the documents that were removed.
 */
- (NSArray<NSString *> *)remove;

/**
 Evict all documents that match the query generated by the preceding function chaining.

 @return A list containing the IDs of the documents that were evicted.
 */
- (NSArray<NSString *> *)evict;

/**
 Update documents that match the query generated by the preceding function chaining.

 @param block A block that gets called with all of the documents matching the query. The documents
 are `DITMutableDocument`s so you can call update-related functions on them.

 @return A dictionary mapping document IDs to lists of `DITUpdateResult`s that describes the updates
 that were performed for each document.
 */
- (NSDictionary<NSString *, NSArray<DITUpdateResult *> *> *)updateWithBlock:
    (void (^)(NSArray<DITMutableDocument *> *))block;

@end

NS_ASSUME_NONNULL_END
